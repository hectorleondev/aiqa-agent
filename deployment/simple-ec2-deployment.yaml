AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simple EC2 deployment for FastAPI Docker application'

Parameters:
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type

  KeyPairName:
    Type: String
    Default: aiqa-agent-keypair
    Description: Name of existing EC2 KeyPair for SSH access
    
  ECRImageURI:
    Type: String
    Description: ECR image URI (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com/aiqa-agent-app:latest)
    
  AllowedCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR block allowed to access the application (use your IP for security)

Resources:
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: aiqa-agent-simple-sg
      GroupDescription: Security group for FastAPI application
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedCIDR
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedCIDR
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AllowedCIDR
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: !Ref AllowedCIDR
          Description: FastAPI direct access
      Tags:
        - Key: Name
          Value: aiqa-agent-simple-sg

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aiqa-agent-simple-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: aiqa-agent-simple-profile
      Roles:
        - !Ref EC2Role

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: aiqa-agent-simple-eip

  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          yum update -y
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          mkdir -p /opt/aiqa-agent
          cd /opt/aiqa-agent
          
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${!ECRImageURI%/*}
          
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            app:
              image: ${ECRImageURI}
              container_name: aiqa-agent-app
              ports:
                - "8000:8000"
                - "80:8000"
              environment:
                - ENVIRONMENT=production
                - DEBUG=false
                - USE_DATABASE=false
                - USE_REDIS=false
                - CACHE_BACKEND=memory
                - SESSION_BACKEND=memory
                - DATABASE_URL=sqlite:///./app.db
                - POSTGRES_HOST=localhost
                - POSTGRES_PORT=5432
                - POSTGRES_DB=aiqa_agent
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=postgres
                - REDIS_URL=redis://localhost:6379
                - REDIS_HOST=localhost
                - REDIS_PORT=6379
                - REDIS_PASSWORD=redis123
                - SECRET_KEY=your-production-secret-key-change-this
                - ALLOWED_HOSTS=*
                - ATLASSIAN_API_TOKEN=MDY2NDE4MjM5MzYwOnvQog+EG1fhPSdOeKV4/dr6cDKR
                - JIRA_BASE_URL=jira-staging.wgu.edu
                - JIRA_TIMEOUT=30
                - JIRA_RETRIES=3
                - AWS_DEFAULT_REGION=${AWS::Region}
              volumes:
                - ./app_data:/app/data
                - ./logs:/app/logs
              restart: unless-stopped
              logging:
                driver: "json-file"
                options:
                  max-size: "10m"
                  max-file: "3"
              healthcheck:
                test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s
          EOF
          
          mkdir -p app_data logs
          chown -R ec2-user:ec2-user /opt/aiqa-agent
          
          docker-compose up -d
          
          cat > /etc/systemd/system/aiqa-agent.service << 'EOF'
          [Unit]
          Description=AIQA Agent Application
          Requires=docker.service
          After=docker.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory=/opt/aiqa-agent
          ExecStart=/usr/local/bin/docker-compose up -d
          ExecStop=/usr/local/bin/docker-compose down
          TimeoutStartSec=0
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl enable aiqa-agent.service
          systemctl start aiqa-agent.service
          
          yum install -y amazon-cloudwatch-agent aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
          
      Tags:
        - Key: Name
          Value: aiqa-agent-simple-ec2
        - Key: Application
          Value: aiqa-agent
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref WebServerInstance
      EIP: !Ref ElasticIP

Outputs:
  PublicIP:
    Description: 'Public IP address of the EC2 instance'
    Value: !Ref ElasticIP
    
  ApplicationURL:
    Description: 'URL to access the FastAPI application'
    Value: !Sub 'http://${ElasticIP}/'
    
  DirectAPIURL:
    Description: 'Direct URL to access the FastAPI application on port 8000'
    Value: !Sub 'http://${ElasticIP}:8000/'
    
  DocsURL:
    Description: 'URL to access the FastAPI documentation'
    Value: !Sub 'http://${ElasticIP}:8000/docs'
    
  SSHCommand:
    Description: 'SSH command to connect to the instance'
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${ElasticIP}'
    
  InstanceId:
    Description: 'EC2 Instance ID'
    Value: !Ref WebServerInstance
