AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 deployment with FastAPI, PostgreSQL, and Redis'

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type (WARNING - t3.micro may crash with DB+Redis+App)

  KeyPairName:
    Type: String
    Default: aiqa-agent-keypair
    Description: Name of existing EC2 KeyPair for SSH access

  ECRImageURI:
    Type: String
    Description: ECR image URI (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com/aiqa-agent-app:latest)

  ECRWorkerImageURI:
    Type: String
    Description: ECR image URI for Worker (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com/aiqa-agent-worker:latest)
    Default: ''  # Optional - if empty, uses same image as API

  AllowedCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR block allowed to access the application

  PostgresPassword:
    Type: String
    NoEcho: true
    Default: postgres-prod-password-change-me
    Description: PostgreSQL password

  RedisPassword:
    Type: String
    NoEcho: true
    Default: redis-prod-password-change-me
    Description: Redis password

  SecretKey:
    Type: String
    NoEcho: true
    Default: your-secret-key-change-this-to-random-string
    Description: Application secret key

  JiraApiToken:
    Type: String
    Default: jira-api-key
    Description: Access key to access jira resources

  JiraBaseUrl:
    Type: String
    Default: jira-base-url
    Description: Jira dashboard url

Resources:
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: aiqa-agent-simple-sg
      GroupDescription: Security group for FastAPI application
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedCIDR
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedCIDR
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AllowedCIDR
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: !Ref AllowedCIDR
          Description: FastAPI direct access
      Tags:
        - Key: Name
          Value: aiqa-agent-simple-sg

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aiqa-agent-simple-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: aiqa-agent-simple-profile
      Roles:
        - !Ref EC2Role

  TaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: aiqa-agent-task-queue
      VisibilityTimeout: 300
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 20
      Tags:
        - Key: Name
          Value: aiqa-agent-task-queue
        - Key: Application
          Value: aiqa-agent

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: aiqa-agent-dlq
      MessageRetentionPeriod: 1209600
      Tags:
        - Key: Name
          Value: aiqa-agent-dlq

  TaskQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TaskQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt EC2Role.Arn
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt TaskQueue.Arn

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: aiqa-agent-simple-eip

  WebServerInstance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-0c02fb55956c7d316
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref WebSecurityGroup
        IamInstanceProfile: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            exec > >(tee /var/log/user-data.log)
            exec 2>&1
            
            echo "=== Starting UserData Script ==="
            echo "ECR API Image URI: ${ECRImageURI}"
            echo "ECR Worker Image URI: ${ECRWorkerImageURI}"
            echo "Region: ${AWS::Region}"
            
            # Update and install Docker
            echo "=== Installing Docker ==="
            yum update -y
            yum install -y docker
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            
            # Install AWS CLI v2
            echo "=== Installing AWS CLI v2 ==="
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            rm -rf aws awscliv2.zip
            
            # Create application directories
            echo "=== Setting up application directories ==="
            mkdir -p /opt/aiqa-agent/{app_data,logs,postgres_data,redis_data,worker_logs}
            cd /opt/aiqa-agent
            
            # Create Docker network
            echo "=== Creating Docker network ==="
            docker network create aiqa-network || true
            
            # Extract registry URL from ECR image URI
            REGISTRY_URL=$(echo "${ECRImageURI}" | cut -d'/' -f1)
            echo "Registry URL: $REGISTRY_URL"
            
            # Login to ECR
            echo "=== Logging into ECR ==="
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin $REGISTRY_URL
            
            if [ $? -ne 0 ]; then
              echo "ERROR: Failed to login to ECR"
              exit 1
            fi
            
            # Pull the application image
            echo "=== Pulling API Docker image: ${ECRImageURI} ==="
            docker pull ${ECRImageURI}
            
            if [ $? -ne 0 ]; then
              echo "ERROR: Failed to pull API Docker image"
              exit 1
            fi
            
            # Pull worker image (use same image if not specified)
            WORKER_IMAGE="${ECRWorkerImageURI}"
            if [ -z "$WORKER_IMAGE" ]; then
              echo "=== Using same image for worker as API ==="
              WORKER_IMAGE="${ECRImageURI}"
            else
              echo "=== Pulling Worker Docker image: $WORKER_IMAGE ==="
              docker pull $WORKER_IMAGE
              if [ $? -ne 0 ]; then
                echo "ERROR: Failed to pull Worker Docker image"
                exit 1
              fi
            fi
            
            # Stop and remove any existing containers
            echo "=== Cleaning up existing containers ==="
            docker stop aiqa-agent-app aiqa-agent-worker aiqa-agent-postgres aiqa-agent-redis 2>/dev/null || true
            docker rm aiqa-agent-app aiqa-agent-worker aiqa-agent-postgres aiqa-agent-redis 2>/dev/null || true
            
            # Start PostgreSQL container
            echo "=== Starting PostgreSQL container (memory-limited) ==="
            docker run -d \
              --name aiqa-agent-postgres \
              --network aiqa-network \
              --memory="300m" \
              --memory-swap="300m" \
              -e POSTGRES_DB=aiqa_agent \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=${PostgresPassword} \
              -e POSTGRES_INITDB_ARGS="--auth-host=scram-sha-256" \
              -e POSTGRES_HOST_AUTH_METHOD=scram-sha-256 \
              -v /opt/aiqa-agent/postgres_data:/var/lib/postgresql/data \
              --restart unless-stopped \
              --log-driver json-file \
              --log-opt max-size=5m \
              --log-opt max-file=2 \
              --health-cmd="pg_isready -U postgres -d aiqa_agent" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=5 \
              --health-start-period=40s \
              postgres:15-alpine
            
            if [ $? -ne 0 ]; then
              echo "ERROR: Failed to start PostgreSQL container"
              exit 1
            fi
            
            # Start Redis container
            echo "=== Starting Redis container (memory-limited) ==="
            docker run -d \
              --name aiqa-agent-redis \
              --network aiqa-network \
              --memory="150m" \
              --memory-swap="150m" \
              -e REDIS_PASSWORD=${RedisPassword} \
              -v /opt/aiqa-agent/redis_data:/data \
              --restart unless-stopped \
              --log-driver json-file \
              --log-opt max-size=5m \
              --log-opt max-file=2 \
              --health-cmd="redis-cli --raw incr ping" \
              --health-interval=30s \
              --health-timeout=5s \
              --health-retries=5 \
              --health-start-period=10s \
              redis:7-alpine \
              redis-server --appendonly yes --requirepass ${RedisPassword} --maxmemory 100mb --maxmemory-policy allkeys-lru
            
            if [ $? -ne 0 ]; then
              echo "ERROR: Failed to start Redis container"
              exit 1
            fi
            
            # Wait for PostgreSQL and Redis to be healthy
            echo "=== Waiting for PostgreSQL to be healthy ==="
            for i in {1..30}; do
              if docker exec aiqa-agent-postgres pg_isready -U postgres -d aiqa_agent > /dev/null 2>&1; then
                echo "PostgreSQL is healthy"
                break
              fi
              echo "Waiting for PostgreSQL... ($i/30)"
              sleep 2
            done
            
            echo "=== Waiting for Redis to be healthy ==="
            for i in {1..30}; do
              if docker exec aiqa-agent-redis redis-cli -a ${RedisPassword} ping > /dev/null 2>&1; then
                echo "Redis is healthy"
                break
              fi
              echo "Waiting for Redis... ($i/30)"
              sleep 2
            done
            
            # Start application container
            echo "=== Starting Application container (memory-limited) ==="
            docker run -d \
              --name aiqa-agent-app \
              --network aiqa-network \
              --memory="350m" \
              --memory-swap="350m" \
              -p 8000:8000 \
              -p 80:8000 \
              -e ENVIRONMENT=production \
              -e OPEN_API_KEY=test \
              -e DEBUG=false \
              -e DATABASE_URL=postgresql://postgres:${PostgresPassword}@aiqa-agent-postgres:5432/aiqa_agent \
              -e REDIS_URL=redis://:${RedisPassword}@aiqa-agent-redis:6379 \
              -e SQS_QUEUE_URL=${TaskQueue} \
              -e ATLASSIAN_API_TOKEN=${JiraApiToken} \
              -e JIRA_BASE_URL=${JiraBaseUrl} \
              -e AWS_DEFAULT_REGION=${AWS::Region} \
              -e AWS_REGION=${AWS::Region} \
              -v /opt/aiqa-agent/app_data:/app/data \
              -v /opt/aiqa-agent/logs:/app/logs \
              --restart unless-stopped \
              --log-driver json-file \
              --log-opt max-size=5m \
              --log-opt max-file=2 \
              --health-cmd="curl -f http://localhost:8000/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              --health-start-period=60s \
              ${ECRImageURI}
            
            if [ $? -ne 0 ]; then
              echo "ERROR: Failed to start Application container"
              exit 1
            fi
            
            # Wait for API to be healthy before starting worker
            echo "=== Waiting for API to be healthy ==="
            for i in {1..30}; do
              if curl -f http://localhost:8000/health > /dev/null 2>&1; then
                echo "API is healthy"
                break
              fi
              echo "Waiting for API... ($i/30)"
              sleep 2
            done
            
            # Start SQS Worker container
            echo "=== Starting SQS Worker container (memory-limited) ==="
            docker run -d \
              --name aiqa-agent-worker \
              --network aiqa-network \
              --memory="250m" \
              --memory-swap="250m" \
              -e ENVIRONMENT=production \
              -e OPEN_API_KEY=test \
              -e DEBUG=false \
              -e DATABASE_URL=postgresql://postgres:${PostgresPassword}@aiqa-agent-postgres:5432/aiqa_agent \
              -e REDIS_URL=redis://:${RedisPassword}@aiqa-agent-redis:6379 \
              -e SQS_QUEUE_URL=${TaskQueue} \
              -e ATLASSIAN_API_TOKEN=${JiraApiToken} \
              -e JIRA_BASE_URL=${JiraBaseUrl} \
              -e AWS_DEFAULT_REGION=${AWS::Region} \
              -e AWS_REGION=${AWS::Region} \
              -v /opt/aiqa-agent/worker_logs:/app/logs \
              --restart unless-stopped \
              --log-driver json-file \
              --log-opt max-size=5m \
              --log-opt max-file=2 \
              $WORKER_IMAGE
            
            if [ $? -ne 0 ]; then
              echo "ERROR: Failed to start Worker container"
              docker logs aiqa-agent-worker
              exit 1
            fi
            
            # Verify all containers are running
            sleep 10
            echo "=== Verifying containers ==="
            docker ps
            
            echo "=== Memory Usage ==="
            free -h
            docker stats --no-stream
            
            # Verify each container
            for container in aiqa-agent-postgres aiqa-agent-redis aiqa-agent-app aiqa-agent-worker; do
              if docker ps | grep -q $container; then
                echo "Container $container is running"
              else
                echo "ERROR: Container $container is not running"
                docker logs $container
                if [ "$container" = "aiqa-agent-app" ]; then
                  exit 1
                fi
              fi
            done
            
            # Set proper permissions
            chown -R ec2-user:ec2-user /opt/aiqa-agent
            
            # Create systemd service for all containers
            echo "=== Creating systemd service ==="
            cat > /etc/systemd/system/aiqa-agent.service << 'SERVICEEOF'
            [Unit]
            Description=AIQA Agent Application Stack
            Requires=docker.service
            After=docker.service
            
            [Service]
            Type=oneshot
            RemainAfterExit=yes
            ExecStartPre=/bin/sleep 5
            ExecStart=/bin/bash -c 'docker start aiqa-agent-postgres aiqa-agent-redis && sleep 15 && docker start aiqa-agent-app && sleep 10 && docker start aiqa-agent-worker'
            ExecStop=/bin/bash -c 'docker stop aiqa-agent-worker aiqa-agent-app aiqa-agent-redis aiqa-agent-postgres'
            Restart=on-failure
            RestartSec=10
            
            [Install]
            WantedBy=multi-user.target
            SERVICEEOF
            
            # Enable service
            systemctl daemon-reload
            systemctl enable aiqa-agent.service
            
            # Install CloudWatch agent
            echo "=== Installing CloudWatch agent ==="
            yum install -y amazon-cloudwatch-agent aws-cfn-bootstrap
            
            # Create deployment info file
            cat > /opt/aiqa-agent/deployment-info.txt << INFOEOF
            Deployment Date: $(date)
            API Image URI: ${ECRImageURI}
            Worker Image URI: $WORKER_IMAGE
            Region: ${AWS::Region}
            Stack Name: ${AWS::StackName}
            PostgreSQL: aiqa-agent-postgres (port 5432)
            Redis: aiqa-agent-redis (port 6379)
            Application: aiqa-agent-app (ports 80, 8000)
            Worker: aiqa-agent-worker (SQS listener)
            INFOEOF
            
            echo "=== UserData Script Completed Successfully ==="
            
            # Signal success to CloudFormation
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}

        Tags:
          - Key: Name
            Value: aiqa-agent-simple-ec2
          - Key: Application
            Value: aiqa-agent
      CreationPolicy:
        ResourceSignal:
          Count: 1
          Timeout: PT15M

  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref WebServerInstance
      EIP: !Ref ElasticIP

Outputs:
  PublicIP:
    Description: 'Public IP address of the EC2 instance'
    Value: !Ref ElasticIP

  ApplicationURL:
    Description: 'URL to access the FastAPI application'
    Value: !Sub 'http://${ElasticIP}/'

  DirectAPIURL:
    Description: 'Direct URL to access the FastAPI application on port 8000'
    Value: !Sub 'http://${ElasticIP}:8000/'

  DocsURL:
    Description: 'URL to access the FastAPI documentation'
    Value: !Sub 'http://${ElasticIP}:8000/docs'

  SSHCommand:
    Description: 'SSH command to connect to the instance'
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${ElasticIP}'

  InstanceId:
    Description: 'EC2 Instance ID'
    Value: !Ref WebServerInstance

  PostgreSQLConnection:
    Description: 'PostgreSQL connection from inside EC2'
    Value: 'docker exec -it aiqa-agent-postgres psql -U postgres -d aiqa_agent'

  RedisConnection:
    Description: 'Redis connection from inside EC2'
    Value: 'docker exec -it aiqa-agent-redis redis-cli -a [password]'

  SQSQueueURL:
    Description: 'SQS Task Queue URL'
    Value: !Ref TaskQueue
    Export:
      Name: !Sub '${AWS::StackName}-TaskQueueURL'

  SQSQueueARN:
    Description: 'SQS Task Queue ARN'
    Value: !GetAtt TaskQueue.Arn

  DeadLetterQueueURL:
    Description: 'SQS Dead Letter Queue URL'
    Value: !Ref DeadLetterQueue

  UserDataLog:
    Description: 'Command to view UserData execution log'
    Value: 'ssh to instance and run: sudo cat /var/log/user-data.log'

  WorkerLogsCommand:
    Description: 'Command to view worker logs'
    Value: 'ssh to instance and run: docker logs -f aiqa-agent-worker'

  WorkerStatusCommand:
    Description: 'Command to check worker status'
    Value: 'ssh to instance and run: docker ps | grep worker'

  AllContainersStatus:
    Description: 'Command to check all container statuses'
    Value: 'ssh to instance and run: docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"'
